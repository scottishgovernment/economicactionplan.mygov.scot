/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/**
 * Calculate rems. $target = pixel size. $context = base pixel size
 */

@function pem($target, $context: $base-font-size) {
  @return ($target / $context) * 1rem;
}

/**
 * Output vendor properties
 */

@mixin vendor($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
}

/* See http://mrdanadams.com/2012/pixel-ems-css-conversion-sass-mixin/ */

/* Default font size in pixels if not overridden. */
$base-font-size: 18;

/* Convert PX units to EMs.
Ex: margin-right: pem(16);
*/
@function pem($pxval, $base: $base-font-size) {
  @return #{$pxval / $base}em;
}

/* Used to convert PX to EMs for multiple properties or values or both.
$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.

Examples:

@include scale(line-height, 30)
@include scale(line-height, 30, 16)
@include scale(width height, 125);
@include scale(padding, 0 25, 16);
@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
*/
@mixin scale($props, $sizes, $base: $base-font-size) {
  $values: ();
  $sublists: false;
  @each $s in $sizes {
    /* unwrap lists for values that have multiple list of values such as text-shadow */
    @if type-of($s) == list {
      $sublists: true;
      $vv: ();
      @each $ss in $s {
        $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}em, $ss));
      }
      $values: append($values, join((), $vv));
    } @else {
      $values: append($values, if(type-of($s) == number, #{$s / $base}em, $s));
    }
  }
  $value: join((), $values, if($sublists, comma, space));
  @each $prop in $props {
    #{$prop}: $value
  }
}

/*
  Finds the closest dimension value that is on-grid, used to keep an element
  roughly the same size if the baseline grid changes and its size is
  dependent on the grid

  @param {px} $input - pixel size we want to round to the nearest baseline grid interval
  @param {px} $line-height - base line height

  @returns {px} length
*/
@function baseline-nearest($input, $line-height: $base-line-height) {
  @return $base-line-height * (round($input / $line-height));
}

/*
  Mixins for media queries at phone, tablet, desktop, and HD sizes

  Usage example:

  h1 {
    font-size: 24px;

    @include media-tablet {
      font-size: 36px;
    }

    @include media-desktop {
      font-size: 48px;
    }
  }
*/

$phone-width: $screen-xs; // 480
$tablet-width: $screen-sm; // 768
$desktop-width: $screen-md; // 992
$hd-width: $screen-lg; // 1200

@mixin media-phone {
  @media (min-width: #{$phone-width}) {
    @content;
  }
}

@mixin media-tablet {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin media-desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}

@mixin media-hd {
  @media (min-width: #{$hd-width}) {
    @content;
  }
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}
